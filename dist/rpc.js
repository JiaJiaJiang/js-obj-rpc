(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.RPC = factory());
})(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	const SUPPORT_ARRAYBUFFER=!!commonjsGlobal.ArrayBuffer,TypedArray=SUPPORT_ARRAYBUFFER&&commonjsGlobal.Float32Array.prototype.constructor.__proto__;SUPPORT_ARRAYBUFFER&&!ArrayBuffer.isView&&(ArrayBuffer.isView=b=>!!(TypedArray&&b instanceof TypedArray||commonjsGlobal.DataView&&b instanceof DataView));const encoder=new TextEncoder,decoder=new TextDecoder,tmpFloat64Array1=new Float64Array(1),tmpUint8Array5=new Uint8Array(5),tmpUint8Array13=new Uint8Array(13);function strToUint8(a){return encoder.encode(a)}function uint8ToStr(a){return decoder.decode(a)}function getSliceInArrayBuffer(a){return a.buffer.slice(a.byteOffset,a.byteOffset+a.byteLength)}function concatArrayBuffers(a){let b=Array(a.length),c=0;for(let d=0;d<a.length;d++)b[d]=c,c+=a[d].byteLength,a[d]instanceof ArrayBuffer&&(a[d]=new Uint8Array(a[d]));const d=new Uint8Array(c);for(let c=0;c<a.length;c++)d.set(a[c],b[c]);return d}class Message{id;random;head;type;_data;hasID;payload;sessionId;isRequest;constructor(a){if(this.sessionId=new DataView(a.buffer,a.byteOffset,a.byteLength).getUint32(0),a=a.subarray(4),ArrayBuffer.isView(a)||!0==a instanceof ArrayBuffer)a=new Uint8Array(a);else throw new TypeError("Wrong data");if(0===a.byteLength)throw new Error("Bad message");if(a=new Uint8Array(a),this.head=a[0],this.isRequest=0==(128&this.head),this.hasID=!this.isRequest||64==(64&this.head),this.hasID){if(5>a.byteLength)throw new Error("Bad message");const b=new DataView(a.buffer,a.byteOffset,a.byteLength);this.id=b.getUint32(1),this.random=b.getUint32(5);}this.type=31&this.head,this.payload=a.buffer.slice(a.byteOffset+this.hasID?9:1,a.byteLength),this._data;}get isCtrl(){return 8>this.type}get isError(){return !(64!=(64&this.head))}data(){return void 0===this._data?(this._data=(()=>{if(8>this.type)return ControlMsg.parseData(this.type,this.payload);switch(this.type){case 8:return !0;case 9:return !1;case 10:return this.payload;case 11:return uint8ToStr(this.payload);case 12:return JSON.parse(uint8ToStr(this.payload));case 13:if(8!==this.payload.byteLength)throw "Wrong data length for number";const a=new DataView(this.payload);return a.getFloat64(0);case 14:return;case 15:return null;case 16:{const a=uint8ToStr(this.payload);return "-"===a[0]?-BigInt("0x"+a.slice(1)):BigInt("0x"+a)}default:throw "Unknown data type"}})(),this._data):this._data}static toFrameData(a){if(a===void 0)return [14];if(null===a)return [15];if(!0===a)return [8];if(!1===a)return [9];if(a instanceof ControlMsg)return [a.code,a.buf];if(a instanceof ArrayBuffer||ArrayBuffer.isView(a))return [10,a.buffer?getSliceInArrayBuffer(a):a];if(a instanceof Error)throw console.error(a),"Dont use Error, use RPC.Error instead";if(a instanceof ErrorMsg)return [12,strToUint8(JSON.stringify({code:a.code||4100,msg:a.msg}))];switch(typeof a){case"string":return [11,strToUint8(a)];case"object":return [12,strToUint8(JSON.stringify(a))];case"number":const b=new DataView(tmpFloat64Array1.buffer,tmpFloat64Array1.byteOffset,tmpFloat64Array1.byteLength);return b.setFloat64(0,a),[13,getSliceInArrayBuffer(b)];case"bigint":return [16,strToUint8(a.toString(16))]}throw new TypeError("Unsupported data type: "+typeof a)}static _pack(a,b,c,d,e,f,g){let h="number"==typeof f&&0<f,i=h?tmpUint8Array13:tmpUint8Array5;i.fill(0);const j=new DataView(i.buffer,i.byteOffset,i.byteLength);j.setUint32(0,a);const k=i.subarray(4,h?13:5);!0===b?h&&(k[0]|=64):(k[0]=128,c&&(k[0]|=64)),k[0]|=d;let l=[i];if(h){if(4294967295<=f)throw new Error("id out of range");j.setUint32(5,f),j.setUint32(9,g);}return e&&e.byteLength&&l.push(e),concatArrayBuffers(l)}static pack(a,b,c,d,e){let[f,g]=Message.toFrameData(c);return Message._pack(a,b,c instanceof ErrorMsg,f,g,d,e)}static msgErrorCodes={4100:"",4101:"Forbidden",4102:"Cannot parse the data",4103:"Not supported operation",4104:"Duplicate id",4105:"Time out"};static isValidId(a){return "number"==typeof a&&0<a&&4294967295>=a}}class ErrorMsg{constructor(a,b=""){if(this.code=a,"string"==typeof b)this.msg=b;else if(b instanceof Error)this.msg=b.message;else throw new Error("Not supported message type")}}class ControlMsg{static cache={};static codes={abort:1};code;buf;constructor(a,b){if(!1==a in ControlMsg.codes)throw new Error("Unknown operation name");switch(this.code=ControlMsg.codes[a],this.code){case ControlMsg.codes.abort:if(!Message.isValidId(b))throw "Invalid id: "+b;this.buf=new ArrayBuffer(4),new DataView(this.buf).setUint32(0,b);}}static parseData(a,b){return a===ControlMsg.codes.abort?new DataView(b).getUint32(0):void 0}}class Request{responded=!1;timeout;constructor(a,b,c,d){this.id=b,this.rpc=a,this.cb=c,this.random=d;}abort(){try{return this.rpc.control("abort",this.id)}catch(a){}finally{this.rpc.delete(this);}}callback(...a){if(this.responded)throw new Error("RPC responded");this.responded=!0,this.cb&&this.cb(...a);}setTimeout(a){if("number"!=typeof a||!(0<=a))throw new Error("Wrong timeout");this.timeout&&clearTimeout(this.timeout),this.timeout=setTimeout(()=>this._timeout(),a);}_timeout(){this.callback(new Error("Time out")),this.rpc.delete(this),this.timeout=0;}_destructor(){this.cb=null,this.rpc=null,this.timeout&&(clearTimeout(this.timeout),this.timeout=0);}}class InRequest{_timeout;aborted=!1;responded=!1;source;rpc;msg;onAbort(){}constructor(a,b,c){this.rpc=b,this.msg=a,this.source=c;}get id(){return this.msg.id}data(){return this.msg.data()}setTimeout(a){if("number"!=typeof a||!(0<=a))throw new Error("Wrong timeout");this._timeout&&clearTimeout(this._timeout),this._timeout=setTimeout(()=>this._reachTimeout(),a);}_abortMsg(a){if(this.aborted)throw new Error("request already aborted");return this.aborted=!0,this.onAbort(a)}async _reachTimeout(){this._timeout=0;try{await this._abortMsg("time out"),this.rpc._respond(this,RPC.Error(4105));}catch(a){}}_destructor(){this.rpc=null,this.msg=null,this._timeout&&(clearTimeout(this._timeout),this._timeout=0);}}class RPC{static Error(a,b){return new ErrorMsg(a,b||Message.msgErrorCodes[a]||"Unexpected error")}debug=!1;_currentID=1;_sessionId=0;_checkerTimer;_sender;defaultRequestTimeout;defaultResponseTimeout;outReqList=new Map;inReqList=new Map;_checkerTimer;onRequest(){}constructor(a={}){this.defaultRequestTimeout=a.defaultRequestTimeout||15e3,this.defaultResponseTimeout=a.defaultResponseTimeout||15e3,this._sessionId=a.sessionId||RPC.generateRandom();}_generateId(){if(4294967295===this.outReqList.size)return !1;for(;this.outReqList.has(`${this._sessionId}_${this._currentID}`);)this._currentID++,4294967295===this._currentID&&(this._currentID=1);return this._currentID}handle(a,b){let c=new Message(a);!0===c.isRequest?this._requestHandle(c,b):this._responseHandle(c,b);}async request(a,b,c){"object"!=typeof b&&(b={});let d,e,f=0;if(!0!==b.noResponse&&!1===(f=this._generateId()))throw new Error("No free id");0!==f&&(e=RPC.generateRandom());let g=Message.pack(this._sessionId,!0,a,f,e);return new Promise((h,i)=>{0!==f&&(d=new Request(this,f,(b,c)=>b?(this.debug&&console.debug("RPC receive error:","req:",a,"res:",b),void i(b)):void h(c),e),this.outReqList.set(`${this._sessionId}_${f}`,d),d.setTimeout(b.timeout||this.defaultRequestTimeout),c&&c(d)),this._send(g).then(b=>{b&&(this.debug&&console.debug("RPC send error","req:",a,"err:",b),i(b));});})}control(a,b){let c=new ControlMsg(a,b);return this.request(c)}delete(a){if(a instanceof Request){const b=`${this._sessionId}_${a.id}`;if(this.outReqList.get(b)===a)this.outReqList.delete(b);else throw new Error("Deleting unknown req");a._destructor();}else if(a instanceof InRequest){const b=`${a.msg.sessionId}_${a.msg.id}`;if(this.inReqList.get(b)===a)this.inReqList.delete(b);else throw new Error("Deleting unknown inReq");a._destructor();}else throw console.error("arg: ",a),new Error("Wrong type")}setSender(a){if("function"!=typeof a)throw new TypeError("not a function");this._sender=a;}async _send(a){if(this._sender)return await this._sender(a);throw new Error("sender not defined")}_respond(a,b){let c=a.msg;if(this.inReqList.get(`${c.sessionId}_${c.id}`)!==a)return void(this.debug&&console.debug("Missing id"));if(c.hasID){let d=Message.pack(a.msg.sessionId,!1,b,c.id,c.random);this._send(d);}this.delete(a);}async _controlHandle(a){const b=a.type,c=a.data();switch(b){case ControlMsg.codes.abort:{let b=this.inReqList.get(`${a.sessionId}_${c}`);if(!b)return;b._abortMsg("remote abort"),this.delete(b);break}default:this.debug&&console.debug("Unknown control code:"+b);}}async _requestHandle(a,b){const c=`${a.sessionId}_${a.id}`;if(this.inReqList.has(c))return void this._respond(a,RPC.Error(4104));let d=new InRequest(a,this,b);a.id&&(d.setTimeout(this.defaultResponseTimeout),this.inReqList.set(c,d));try{let e;e=!0===a.isCtrl?await this._controlHandle(a,b):await this.onRequest(d),d.msg&&d.msg.id&&this.inReqList.get(c)===d&&this._respond(d,e);}catch(a){this._respond(d,a);}}_responseHandle(a){let b=this.outReqList.get(`${a.sessionId}_${a.id}`);return b?void(b.random!==a.random||(a.isError?b.callback(a.data()):b.callback(null,a.data()),this.delete(b))):void(this.debug&&console.debug("no req for id:"+a.id))}static generateRandom(){return Math.round(4294967295*Math.random())}destroy(){for(let[a,b]of this.outReqList)b.callback(new Error("connection destroyed"));for(let[a,b]of this.inReqList)b._abortMsg("connection destroyed");this.outReqList.clear(),this.inReqList.clear();}}var jsObjRpc={RPC};

	return jsObjRpc;

}));
//# sourceMappingURL=rpc.js.map
